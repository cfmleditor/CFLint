buildscript {
    repositories {
        mavenLocal()
        maven {
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
        maven { 
            url = "https://cfmlprojects.org/artifacts" 
        }
        maven {
            url = "https://maven.pkg.github.com/cfmleditor/cfparser"
            mavenContent {
                snapshotsOnly()
            }
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0"
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.64"
        // classpath "net.thebugmc.gradle:sonatype-central-portal-publisher:1.2.3"
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.1'
    id 'eclipse'
    id 'signing'
    // id 'net.thebugmc.gradle.sonatype-central-portal-publisher' version '1.2.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.ADOPTIUM
    }
    
    withJavadocJar()
    withSourcesJar()
}

// Helper functions and constants
def getLatestTag = { ->
    try {
        def stdout = new ByteArrayOutputStream()

        String osName = System.getProperty('os.name').toLowerCase();

        if (osName.contains('win')) {
            //exec {
            //    commandLine 'cmd', '/c', 'hg.exe', 'parent', '--template', '{rev}'
            //    standardOutput = stdout
            //}
        } else if (osName.contains('mac')) {
            exec {
                commandLine "src/main/resources/scripts/getLatestTag.sh"
                standardOutput = stdout
            }
        }
        return stdout.toString()
    }
    catch (ignored) {
        print("fail")
        println(ignored.toString())
        throw new GradleException('Git command to find latest tag failed')
    }
}

apply plugin: "base"
apply plugin: "signing"
//apply plugin: "com.bmuschko.nexus"

apply plugin: 'java'
apply plugin: 'maven-publish'
apply from: 'cobertura.gradle'
//apply from: 'deploy.gradle'
apply plugin: 'se.bjurr.gitchangelog.git-changelog-gradle-plugin'
// apply plugin: "net.thebugmc.gradle.sonatype-central-portal-publisher"

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    maven { 
        url = "https://oss.sonatype.org/content/repositories/snapshots" 
    }
    maven { 
        url = "https://repo.maven.apache.org/maven2" 
    }
    maven { 
        url = "https://oss.sonatype.org/content/repositories/releases" 
    }
    maven { 
        url = "https://cfmlprojects.org/artifacts" 
    }
    maven {
        url = "https://maven.pkg.github.com/cfmleditor/cfparser"
        mavenContent {
            snapshotsOnly()
        }
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}
dependencies {
    implementation group: 'com.github.cfmleditor', name: 'cfml.parsing', version: '2.14.0-SNAPSHOT'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.2'
    implementation group: 'ro.fortsoft.pf4j', name: 'pf4j', version: '0.6'
    implementation group: 'org.apache.ant', name: 'ant', version: '1.10.14'
    implementation group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.1.17'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.7'
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.12.7'
    implementation(group: 'net.java.dev.stax-utils', name: 'stax-utils', version: '20070216') {
        exclude module: 'jsr173-ri'
        exclude module: 'jsr173'
    }
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
}

test {
    testLogging {
        exceptionFormat = 'full'
        showExceptions = true
        events "skipped", "failed", "standardError"
        showStandardStreams = true
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'com.cflint.cli.CFLintCLI',
            'Implementation-Version': version,
            'Bundle-Name': 'cflint',
            'Bundle-SymbolicName': 'io.cfmleditor.cflint',
            'Bundle-Description': 'cflint',
            'Bundle-ManifestVersion': 2,
            'Bundle-Version': version
        )
    }
}

task fatJar(type: Jar) {

    manifest.from jar.manifest
    archiveClassifier.set('all')
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    with jar
}

artifacts {
    archives fatJar
}

task gitChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    group="documentation"

    file = new File("CHANGELOG.md");
    templateContent = file('src/main/resources/changelog.mustache').getText('UTF-8');
}

task githubChangelogGenerator {
    group="documentation"

    doLast {
        def latestTag = getLatestTag()

        def props = new Properties()
        props.load(new FileInputStream("user.properties"))
        def changelogBinary = props.getProperty("user.githubChanglogGeneratorBinary")
        def githubToken = props.getProperty("user.githubToken")

        def p = ['src/main/resources/scripts/writeChangelog.sh', changelogBinary, githubToken, latestTag].execute()
        println p.text
    }
}

tasks.register('stuffZip', Zip) {
    archiveBaseName = 'stuff'
    from 'src/stuff'
}

// signing {
//     sign stuffZip
// }


// centralPortal {
//     pom {
//         name = 'cfmleditor-cflint'
//         description = 'cflint'
//         url = "https://github.com/cfmleditor/CFLint/"
//         licenses {
//             license {
//                 name = "bsd-3-clause"
//                 url = "https://opensource.org/license/bsd-3-clause"
//             }
//         }
//         developers {
//             developer {
//                 name = "Gareth Edwards"
//                 email = "ghedwards@gmail.com"
//                 organization = "cfmleditor"
//                 organizationUrl = "https://github.com/cfmleditor/"
//             }
//         }
//         scm {
//             url = "https://github.com/cfmleditor/CFLint/"
//         }
//     }
//     publishingType = USER_MANAGED
// }
